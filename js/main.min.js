"use strict";document.addEventListener("DOMContentLoaded",function(){document.getElementById("header");var e=document.getElementById("header__burger"),t=document.getElementById("menu__burger"),c=document.getElementById("menu"),s=document.getElementById("overlay");function n(e){a.classList.remove("active"),c.classList.remove("active"),s.classList.remove("active"),document.body.classList.remove("menu-active")}s.addEventListener("click",n),t.addEventListener("click",n),e.addEventListener("click",function(e){c.classList.add("active"),s.classList.add("active"),document.body.classList.add("menu-active")});var t=document.getElementById("mixitup"),i=(mixitup(t),document.getElementById("tabs"));i.addEventListener("click",function(e){var e=e.target,t=i.querySelectorAll(".portfolio__tab-btn");e&&e.classList.contains("portfolio__tab-btn")&&(t.forEach(function(e){e.classList.remove("active")}),e.classList.add("active"),e.classList.contains("all"))&&qwe.filter("all").then(function(e){qwe.sort("order:asc").then(function(){console.log("Sorting completed")})})});new Typed("#typed",{strings:["web-designer","front-end developer"],typeSpeed:100,backSpeed:75,startDelay:75,loop:!0});e=document.getElementById("services__content");e.querySelectorAll(".services__item");e.addEventListener("click",function(e){(e=e.target)&&e.classList.contains("services__item")?e.classList.add("active"):e&&e.classList.contains("services__item-prev")&&e.closest(".services__item").classList.remove("active")});var t=document.querySelector(".portfolio__cards"),a=document.getElementById("modal");document.getElementById("modal__close").addEventListener("click",function(){a.classList.remove("active"),s.classList.remove("active")}),t.addEventListener("click",function(e){e=e.target,console.log(e),a.classList.add("active"),s.classList.add("active")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
