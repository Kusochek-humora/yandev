"use strict";function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_unsupportedIterableToArray(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,a,l,i=[],c=!0,u=!1;try{if(a=(t=t.call(e)).next,0===r){if(Object(t)!==t)return;c=!1}else for(;!(c=(n=a.call(t)).done)&&(i.push(n.value),i.length!==r);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(u)throw o}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,r){var t,n,o,a,l="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(l)return n=!(t=!0),{s:function(){l=l.call(e)},n:function(){var e=l.next();return t=e.done,e},e:function(e){n=!0,o=e},f:function(){try{t||null==l.return||l.return()}finally{if(n)throw o}}};if(Array.isArray(e)||(l=_unsupportedIterableToArray(e))||r&&e&&"number"==typeof e.length)return l&&(e=l),a=0,{s:r=function(){},n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:r};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){var t;if(e)return"string"==typeof e?_arrayLikeToArray(e,r):"Map"===(t="Object"===(t=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}document.addEventListener("DOMContentLoaded",function(){var n=document.querySelectorAll(".blog__image"),o=document.querySelector(".panel__cv-meta");function l(){fetch("https://yanessa-dev.lol/api/blogs").then(function(e){if(e.ok)return e.json();throw new Error("Network response was not ok")}).then(function(e){console.log("Данные полученыasdasasd:",e),console.log(e[4]);var r=e[4],t=r.photo;r.cv;n.forEach(function(e,r){e.src="https://yanessa-dev.lol/storage/".concat(t[r].file_path.replace("public/",""))}),o.href="https://yanessa-dev.lol/storage/".concat(e[4].file_CV.replace("public/",""))}).catch(function(e){console.error("Произошла ошибка при выполнении запроса:",e)})}l(),document.querySelector(".blog-submit").addEventListener("click",function(){var n=new FormData;document.querySelectorAll(".blog-ipt").forEach(function(e){var r=e.files,t=e.getAttribute("data-blog");console.log(t),"file_CV"===t&&console.log(e),0<r.length&&n.append(t,r[0])});var e,r=_createForOfIteratorHelper(n.entries());try{for(r.s();!(e=r.n()).done;){var t=_slicedToArray(e.value,2),o=t[0],a=t[1];console.log("".concat(o,": ").concat(a))}}catch(e){r.e(e)}finally{r.f()}fetch("https://yanessa-dev.lol/api/blog/update/5",{method:"POST",body:n}).then(function(e){if(e.ok)return e.json();throw new Error("Произошла ошибка")}).then(function(e){console.log(e),l()}).catch(function(e){console.error("Ошибка:",e),alert("Произошла ошибка при загрузке файлов")})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
