"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return c};var u,c={},t=Object.prototype,s=t.hasOwnProperty,l=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function a(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(u){a=function(t,e,r){return t[e]=r}}function i(t,e,r,n){var o,a,c,i,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),n=new x(n||[]);return l(e,"_invoke",{value:(o=t,a=r,c=n,i=p,function(t,e){if(i===f)throw new Error("Generator is already running");if(i===y){if("throw"===t)throw e;return{value:u,done:!0}}for(c.method=t,c.arg=e;;){var r=c.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===u)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=u,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),m;n=d(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,m;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=u),r.delegate=null,m):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m)}(r,c);if(r){if(r===m)continue;return r}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(i===p)throw i=y,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);i=f;r=d(o,a,c);if("normal"===r.type){if(i=c.done?y:h,r.arg===m)continue;return{value:r.arg,done:c.done}}"throw"===r.type&&(i=y,c.method="throw",c.arg=r.arg)}})}),e}function d(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}c.wrap=i;var p="suspendedStart",h="suspendedYield",f="executing",y="completed",m={};function v(){}function g(){}function w(){}var e={},b=(a(e,n,function(){return this}),Object.getPrototypeOf),b=b&&b(b(S([]))),j=(b&&b!==t&&s.call(b,n)&&(e=b),w.prototype=v.prototype=Object.create(e));function E(t){["next","throw","return"].forEach(function(e){a(t,e,function(t){return this._invoke(e,t)})})}function _(c,i){var e;l(this,"_invoke",{value:function(r,n){function t(){return new i(function(t,e){!function e(t,r,n,o){var a,t=d(c[t],c,r);if("throw"!==t.type)return(r=(a=t.arg).value)&&"object"==_typeof(r)&&s.call(r,"__await")?i.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):i.resolve(r).then(function(t){a.value=t,n(a)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function L(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0)}function S(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(s.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=u,t.done=!0,t}).next=t}throw new TypeError(_typeof(e)+" is not iterable")}return l(j,"constructor",{value:g.prototype=w,configurable:!0}),l(w,"constructor",{value:g,configurable:!0}),g.displayName=a(w,o,"GeneratorFunction"),c.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,a(t,o,"GeneratorFunction")),t.prototype=Object.create(j),t},c.awrap=function(t){return{__await:t}},E(_.prototype),a(_.prototype,r,function(){return this}),c.AsyncIterator=_,c.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var a=new _(i(t,e,r,n),o);return c.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},E(j),a(j,o,"Generator"),a(j,n,function(){return this}),a(j,"toString",function(){return"[object Generator]"}),c.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},c.values=S,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=u,this.done=!1,this.delegate=null,this.method="next",this.arg=u,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&s.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=u)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return a.type="throw",a.arg=r,n.next=t,e&&(n.method="next",n.arg=u),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],a=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var c=s.call(o,"catchLoc"),i=s.call(o,"finallyLoc");if(c&&i){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!i)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&s.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var a=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),m}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,k(o)),n}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:S(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=u),m}},c}function asyncGeneratorStep(t,e,r,n,o,a,c){try{var i=t[a](c),u=i.value}catch(t){return void r(t)}i.done?e(u):Promise.resolve(u).then(n,o)}function _asyncToGenerator(i){return function(){var t=this,c=arguments;return new Promise(function(e,r){var n=i.apply(t,c);function o(t){asyncGeneratorStep(n,e,r,o,a,"next",t)}function a(t){asyncGeneratorStep(n,e,r,o,a,"throw",t)}o(void 0)})}}document.addEventListener("DOMContentLoaded",function(){var t=document.getElementById("project-block"),l=(document.getElementById("projects-submit"),document.querySelector('[data-form="projects"]')),o=document.querySelector('[data-modal="projects"]').querySelectorAll(".modal-panel__message"),d=t.querySelector("[data-project-length]"),a={show:"https://yanessa-dev.lol/api/projects",delete:"https://yanessa-dev.lol/api/project/destroy/",create:"https://yanessa-dev.lol/api/project/create",showId:"https://yanessa-dev.lol/api/project/",update:"https://yanessa-dev.lol/api/project/update/"},n=(document.querySelector(".panel-form__progress-area"),document.querySelector(".panel-form__uploaded-area")),c=document.getElementById("fileInput"),p=document.getElementById("panel-form__upload-img");function i(t){document.querySelector('[data-content="project"] tbody').innerHTML="",fetch(t).then(function(t){if(t.ok)return t.json();throw new Error("Ошибка HTTP, статус "+t.status)}).then(function(l){l.forEach(function(t){var e,r,n,o,a,c,i,u,s;t=t,e=l.length,d.textContent="Всего проектов: ".concat(e),e=t.sort_order,r=t.file_cover,n=t.title,o=t.period,a=t.deadline,c=t.tag,i=t.description,t=t.id,c=0===c.length?"":c.map(function(t){return t.name}).join(", "),u=document.querySelector('[data-content="project"] tbody'),(s=document.createElement("tr")).innerHTML="\n          <td>".concat(e,'</td>\n          <td><img src="https://yanessa-dev.lol/storage/').concat(r.replace("public/",""),'" alt="image" /></td>\n          <td>').concat(n,"</td>\n          <td>").concat(o,"</td>\n          <td>").concat(a,"</td>\n          <td>").concat(c,"</td>\n          <td>").concat(i,'</td>\n          <td class="table-btn" data-modal-btn="projects" data-request-project="update" data-project-id="').concat(t,'">\n            <img src="images/update.svg" alt="update" />\n          </td>\n          <td class="table-btn"  data-request-project="delete" data-project-id="').concat(t,'">\n            <img src="images/delete.svg" alt="delete" />\n          </td>\n        '),u.appendChild(s)})}).catch(function(t){console.error("Произошла ошибка:",t)})}function h(){return(h=_asyncToGenerator(_regeneratorRuntime().mark(function t(e){var r;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(e);case 3:return r=t.sent,t.next=6,r.blob();case 6:return r=t.sent,t.abrupt("return",r);case 10:return t.prev=10,t.t0=t.catch(0),console.error("Failed to load image:",t.t0),t.abrupt("return",null);case 14:case"end":return t.stop()}},t,null,[[0,10]])}))).apply(this,arguments)}t.addEventListener("click",function(t){var e,t=t.target;o.forEach(function(t){return t.style.display="none"}),l.style.display="block",t&&t.hasAttribute("data-request-project")&&("delete"===t.getAttribute("data-request-project")?(l.setAttribute("data-project-method","".concat(t.dataset.requestProject)),t&&t.hasAttribute("data-project-id")&&(e=a.delete+t.dataset.projectId,fetch(e,{method:"POST",body:{}}).then(function(t){if(t.ok)return t.json();throw new Error("Network response was not ok")}).then(function(t){i(a.show)}).catch(function(t){console.error("There was a problem with your fetch operation:",t)}))):"update"===t.getAttribute("data-request-project")?(l.setAttribute("data-project-method","".concat(t.dataset.requestProject)),t&&t.hasAttribute("data-project-id")&&(l.setAttribute("data-project-id","".concat(t.dataset.projectId)),console.log(t.dataset.projectId),e=a.showId+t.dataset.projectId,fetch(e,{method:"POST",body:{}}).then(function(t){if(t.ok)return t.json();throw new Error("Network response was not ok")}).then(function(t){console.log("Response data:",t);var e=l.querySelectorAll("input"),r=l.querySelectorAll("textarea"),n=t.sort_order,o=t.file_cover,a=t.title,c=t.period,i=t.deadline,u=t.tag,s=t.description;t.id;"description"===r[0].name&&(r[0].value=s),e.forEach(function(t){var e;"sort_order"===t.name&&(t.value=n),"file_cover"===t.name&&(function(){var t=_asyncToGenerator(_regeneratorRuntime().mark(function t(){var e,r;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,function(){return h.apply(this,arguments)}("https://yanessa-dev.lol/storage/".concat(o.replace("public/","")));case 3:(e=t.sent)?((r=new FileReader).onload=function(t){p.setAttribute("src",t.target.result)},r.readAsDataURL(e)):console.log("Failed to load image as Blob."),t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error("Error handling image:",t.t0);case 10:case"end":return t.stop()}},t,null,[[0,7]])}));return function(){return t.apply(this,arguments)}}()(),console.dir(t)),"title"===t.name&&(t.value=a),"period"===t.name&&(t.value=c),"deadline"===t.name&&(t.value=i),"category"===t.name&&(t.value=category),"tags[]"===t.name&&(0===u.length?document.querySelectorAll('input[name="tags[]"]').forEach(function(t){t.checked=!1}):(e=u.map(function(t){return t.name}),document.querySelectorAll('input[name="tags[]"]').forEach(function(t){e.includes(t.value)?t.checked=!0:t.checked=!1})))})}).catch(function(t){console.error("There was a problem with your fetch operation:",t)}))):l.setAttribute("data-project-method","".concat(t.dataset.requestProject)))}),l.addEventListener("submit",function(t,e,r){t&&t.preventDefault();var t=l.dataset.projectMethod,n=l.dataset.projectId;"add"===t&&!function(t){var e=new FormData(document.querySelector('[data-form="projects"]'));document.getElementById("fileInput");fetch(t,{method:"POST",body:e}).then(function(t){if(t.ok)return t.json();throw o[1].style.display="block",l.reset(),l.style.display="none",new Error("Network response was not ok")}).then(function(t){console.log(t),l.reset(),l.style.display="none",o[0].style.display="block",p.setAttribute("src","uploads/avatar.svg"),i(a.show)}).catch(function(t){o[1].style.display="block",l.reset(),l.style.display="none",console.error("There has been a problem with your fetch operation:",t)})}(a.create);"update"===t&&!function(t){var e=new FormData(document.querySelector('[data-form="projects"]')),r=document.getElementById("fileInput");0<r.files.length&&e.append("file_cover",r.files[0]);fetch(t,{method:"POST",body:e}).then(function(t){if(t.ok)return t.json();throw o[1].style.display="block",l.reset(),l.style.display="none",new Error("Network response was not ok")}).then(function(t){console.log(t),l.reset(),l.style.display="none",o[0].style.display="block",p.setAttribute("src","uploads/avatar.svg"),i(a.show)}).catch(function(t){o[1].style.display="block",l.reset(),l.style.display="none",console.error("There has been a problem with your fetch operation:",t)})}(a.update+n)}),i(a.show),c.addEventListener("change",function(t){var e,r,t=t.target.files[0];2<(r=(t=t).size/1048576)?(alert('Файл "'.concat(t.name,'" превышает максимально допустимый размер (2 МБ).')),c.value=""):((e=new FileReader).onload=function(t){p.setAttribute("src",t.target.result)},e.readAsDataURL(t),e=function(t,e){return t.length>e?t.substring(0,e-3)+"...":t}(t.name,20),n.classList.add("active"),n.textContent=" ".concat(e,", ").concat(r.toFixed(2)," МБ"))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
